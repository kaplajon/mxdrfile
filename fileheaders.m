function [methodinfo,structs,enuminfo,ThunkLibName]=fileheaders
%FILEHEADERS Create structures to define interfaces found in 'xdrfile_xtc'.

%This function was generated by loadlibrary.m parser version 1.1.6.38 on Thu Apr 17 13:19:29 2014
%perl options:'xdrfile_xtc.i -outfile=fileheaders.m -thunkfile=libxdr_thunk.c -header=xdrfile_xtc.h xdrfile_trr xdrfile'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'libxdr_thunk');
% XDRFILE * xdrfile_open ( const char * path , const char * mode ); 
fcns.thunkname{fcnNum}='voidPtrcstringcstringThunk';fcns.name{fcnNum}='xdrfile_open'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='XDRFILEPtr'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int xdrfile_close ( XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='xdrfile_close'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_read_char ( char * ptr , int ndata , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32cstringint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_read_char'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_write_char ( char * ptr , int ndata , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32cstringint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_write_char'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_read_uchar ( unsigned char * ptr , int ndata , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_read_uchar'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_write_uchar ( unsigned char * ptr , int ndata , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_write_uchar'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_read_short ( short * ptr , int ndata , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_read_short'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16Ptr', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_write_short ( short * ptr , int ndata , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_write_short'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int16Ptr', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_read_ushort ( unsigned short * ptr , int ndata , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_read_ushort'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_write_ushort ( unsigned short * ptr , int ndata , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_write_ushort'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16Ptr', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_read_int ( int * ptr , int ndata , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_read_int'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_write_int ( int * ptr , int ndata , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_write_int'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_read_uint ( unsigned int * ptr , int ndata , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_read_uint'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32Ptr', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_write_uint ( unsigned int * ptr , int ndata , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_write_uint'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32Ptr', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_read_float ( float * ptr , int ndata , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_read_float'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_write_float ( float * ptr , int ndata , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_write_float'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_read_double ( double * ptr , int ndata , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_read_double'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_write_double ( double * ptr , int ndata , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_write_double'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_read_string ( char * ptr , int maxlen , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32cstringint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_read_string'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_write_string ( char * ptr , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='xdrfile_write_string'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_read_opaque ( char * ptr , int nbytes , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32cstringint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_read_opaque'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_write_opaque ( char * ptr , int nbytes , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32cstringint32voidPtrThunk';fcns.name{fcnNum}='xdrfile_write_opaque'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_compress_coord_float ( float * ptr , int ncoord , float precision , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32floatvoidPtrThunk';fcns.name{fcnNum}='xdrfile_compress_coord_float'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'int32', 'single', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_decompress_coord_float ( float * ptr , int * ncoord , float * precision , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='xdrfile_decompress_coord_float'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'int32Ptr', 'singlePtr', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_compress_coord_double ( double * ptr , int ncoord , double precision , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doublevoidPtrThunk';fcns.name{fcnNum}='xdrfile_compress_coord_double'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'int32', 'double', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% int xdrfile_decompress_coord_double ( double * ptr , int * ncoord , double * precision , XDRFILE * xfp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='xdrfile_decompress_coord_double'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'doublePtr', 'int32Ptr', 'doublePtr', 'XDRFILEPtr'};fcnNum=fcnNum+1;
% extern int read_trr_natoms ( char * fn , int * natoms ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='read_trr_natoms'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int read_trr ( XDRFILE * xd , int natoms , int * step , float * t , float * lambda , matrix box , rvec * x , rvec * v , rvec * f ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='read_trr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'XDRFILEPtr', 'int32', 'int32Ptr', 'singlePtr', 'singlePtr', 'singlePtr', 'singlePtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern int write_trr ( XDRFILE * xd , int natoms , int step , float t , float lambda , matrix box , rvec * x , rvec * v , rvec * f ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32floatfloatvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='write_trr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'XDRFILEPtr', 'int32', 'int32', 'single', 'single', 'singlePtr', 'singlePtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern int read_xtc_natoms ( char * fn , int * natoms ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='read_xtc_natoms'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int read_xtc ( XDRFILE * xd , int natoms , int * step , float * time , matrix box , rvec * x , float * prec ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='read_xtc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'XDRFILEPtr', 'int32', 'int32Ptr', 'singlePtr', 'singlePtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern int write_xtc ( XDRFILE * xd , int natoms , int step , float time , matrix box , rvec * x , float prec ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32floatvoidPtrvoidPtrfloatThunk';fcns.name{fcnNum}='write_xtc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'XDRFILEPtr', 'int32', 'int32', 'single', 'singlePtr', 'singlePtr', 'single'};fcnNum=fcnNum+1;
structs.XDRFILE.members=struct('');
methodinfo=fcns;