function psfwrite(psffilename,M,pairlist,sysname)
% psfwrite(psffilename,M,pairlist,sysname)
%
% write molecular properties and bond information to psf file format, for
% visualization with vmd (only pairwise bonds are included).
%
% psffilename   filename to write to (overwritten)
% M             pdb structure
% pairlist      matrix of atom numbers to draw bonds between, one pair per
%               row.
% sysname       name string for system (no format specs)
% M.L. 2012-11-02

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% This function writes a psf file
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% This file is part of mxdrfile.
%%
%% Copyright © 2016 Martin Lindén. All Rights Reserved.
%%
%% Redistribution and use in source and binary forms, with or without
%% modification, are permitted provided that the following conditions are
%% met:
%%
%% 1. Redistributions of source code must retain the above copyright
%%    notice,this list of conditions and the following disclaimer.
%%
%% 2. Redistributions in binary form must reproduce the above copyright
%%    notice, this list of conditions and the following disclaimer in the
%%    documentation and/or other materials provided with the distribution.
%%
%% 3. The name of the author may not be used to endorse or promote products
%%    derived from this software without specific prior written permission.
%%
%% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS "AS IS"
%% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
%% THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
%% PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
%% DIRECT,INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
%% (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
%% SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
%% HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
%% STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
%% ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
%% POSSIBILITY OF SUCH DAMAGE.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


fid=fopen(psffilename,'w'); % open and overwrite

% PSF header
fprintf(fid,'PSF\n');
fprintf(fid,'\n');
fprintf(fid,'       2 !NTITLE\n');
fprintf(fid,' REMARKS generated by matlab script (by M.L.)\n');
fprintf(fid,' REMARKS system name : %s \n',sysname);

% atom records
fprintf(fid,'%8d !NATOM\n',length(M.Model.Atom));
for k=1:length(M.Model.Atom)
    %The fields in the atom section are 
    % atom ID, 
    atomID=k;
    % segment name, no spaces
    segmentName=M.Model.Atom(k).segID;
    segmentName=segmentName(~segmentName==' ');
    % residue ID,
    residueID=M.Model.Atom(k).resSeq;
    %residue name,
    residueName=M.Model.Atom(k).resName;
    %atom name,
    atomName=M.Model.Atom(k).AtomName;
    %atom type,
    atomType=[M.Model.Atom(k).AtomNameStruct.chemSymbol ...
              M.Model.Atom(k).AtomNameStruct.remoteInd];
                  %M.Model.Atom(k).AtomNameStruct.branch];
    %charge
    charge=0;
    %mass, 
    mass=1;
    %and an unused 0.
    fprintf(fid,'%8d%1s%6d%7s%5s%4s %12.6f %13.3f%12d\n',...
        atomID,segmentName,residueID,residueName,atomName,atomType,charge,mass,0);
                             
end
fprintf(fid,'\n');
% bonds 
fprintf(fid,'%8d !NBOND\n',size(pairlist,1));
psfbonds=reshape(pairlist',1,prod(size(pairlist)));
fprintf(fid,'%8d%8d%8d%8d%8d%8d%8d%8d\n',psfbonds);   
fprintf(fid,'\n');
% other sections (empty)
fprintf(fid,'       0 !NTHETA: angles\n');
fprintf(fid,'       0 !NPHI: dihedrals\n');
fprintf(fid,'       0 !NIMPHI: impropers\n');
fprintf(fid,'       0 !NDON: donors\n');


